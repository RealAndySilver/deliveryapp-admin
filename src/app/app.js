(function (app) {    app.config(function ($stateProvider, $urlRouterProvider) {        $urlRouterProvider.otherwise('/loginuser');    });    app.run(['$rootScope', '$state', function($rootScope, $state) {        /*validation to redirect login if user is not logged in and        //to redirect to admin profile if it's opposite case*/        $rootScope.$on("$stateChangeStart", function(e, toState, toParams, fromStatate, fromParams) {            if (toState.name === 'loginUser') {                if (sessionStorage.getItem("user")) {                    e.preventDefault();                    $state.go("profile");                }                return;            }            if (!sessionStorage.getItem("user")) {                e.preventDefault();                $state.go("loginUser");            }        });    }]);    app.service('Navbar', [function () {        this.getVisibility = function () {            if (sessionStorage.getItem("user")) {                return true;            } else {                return false;            }        };    }]);    app.controller('AppController', ['$state', '$scope', 'User', 'Navbar', function ($state, $scope, User, Navbar) {            var model = this;            model.showServicesBool = false;            model.turnShowServices = function () {                if (model.showServicesBool) {                    model.showServicesBool = false;                } else {                    model.showServicesBool = true;                }                $state.go('services');            };            model.goStatistics = function () {                if (model.showServicesBool) {                    model.showServicesBool = false;                }                $state.go('profile');            };            model.goUsers = function () {                if (model.showServicesBool) {                    model.showServicesBool = false;                }                $state.go('users');            };            model.goMessengers = function () {                if (model.showServicesBool) {                    model.showServicesBool = false;                }                $state.go('messengers');            };            model.goRequestService = function () {                $state.go('requestMessenger');            };            model.goActiveServices = function () {                $state.go('activeServices');            };            model.goCompletedServices = function () {                $state.go('completedServices');            };            model.goAbortedServices = function () {                $state.go('abortedServices');            };            model.goTermsConditions = function () {                $state.go('termsConditions');            };            model.logOut = function () {                localStorage.removeItem('isLogin');                localStorage.removeItem('user');                sessionStorage.removeItem('user');                localStorage.removeItem('userInfoLogin');                $state.go('loginUser');            };            model.getVisibility = Navbar.getVisibility;            /*console.log("SHOW MENU", model.ShowMenu);*/        }]);    /*inicializa el usuario que se va a guardar en local storage*/    app.value('User', {});    app.value("ShowMenu", true);    app.value('PickupAddresses', []);    app.value('DeliveryAddresses', []);}(angular.module("appMensajeria", [    'appMensajeria.getAddresses',    'appMensajeria.home',    'appMensajeria.about',    'templates-app',    'templates-common',    'ui.router.state',    'ui.router',    'ui.bootstrap',    'ngMaterial',    'appMensajeria.loginUser',    'appMensajeria.createUser',    'appMensajeria.serverComunicator',    'appMensajeria.confirmPassword',    'appMensajeria.requestMessenger',    'appMensajeria.userMap',    'angularReverseGeocode',    'appMensajeria.session',    'mdDateTime',    'appMensajeria.getPrice',    'appMensajeria.recoverPassword',    'appMensajeria.searchingMessenger',    'appMensajeria.serviceDetails',    'appMensajeria.profile',    'appMensajeria.alerts',    'appMensajeria.changePassword',    'appMensajeria.activeServices',    'appMensajeria.completedServices',    'appMensajeria.abortedServices',    'appMensajeria.termsConditions',    'appMensajeria.ratingMessenger',    'appMensajeria.users',    'appMensajeria.userDetails',    'appMensajeria.messengers',    'appMensajeria.messengerDetails',    'appMensajeria.requestedServices',    'appMensajeria.services',    'bootstrap-modal',    'bootstrap-loading']).factory('Interceptor',function($q,$location,$window,$rootScope){    return {        // optional method        request: function (req) {            if (! $rootScope.callCounter){                $rootScope.callCounter=0;            }            $rootScope.callCounter++;            $('#mydiv').show();            return req;        },        'response': function(response) {            // do something on success            $rootScope.callCounter--;            if ($rootScope.callCounter===0){                $('#mydiv').hide();            }            return response || $q.when(response);        },        'responseError': function(rejection) {            $rootScope.callCounter--;            if ($rootScope.callCounter===0){                $('#mydiv').hide();                if (rejection.status===401){                    if (app.isLogged()){                        $rootScope.$broadcast('unauthorized');                    }                }            }            if (rejection.status!=401){                $rootScope.$broadcast('failure');            }            console.log(rejection);            return $q.reject(rejection);        }    };}).config(['$urlRouterProvider', "$stateProvider","$httpProvider", function ($urlRouterProvider, $stateProvider,$httpProvider) {    $urlRouterProvider.otherwise("loginuser");    $stateProvider.state("AppProvider", {        controllerAs: "app",        controller: "AppController"    });    $httpProvider.interceptors.push('Interceptor');}])));